{
	"0": {
		"syntax1": {
			"description": "Find the error in this code segment.",
			"brokenpath": "syntax1.js",
			"tester": "syntax1tester.js"
		},
		"syntax2": {
			"description": "Find the error in this code segment.",
			"brokenpath": "syntax2.js",
			"tester": "syntax1tester.js"
		},
		"syntax3": {
			"description": "Find the error in this code segment.",
			"brokenpath": "syntax3.js",
			"tester": "syntax1tester.js"
		},
		"singleequals1": {
			"description": "Find the error in this code segment.",
			"brokenpath": "singleequals1.js",
			"tester": "singleequals1tester.js"
		}
	},
	"1": {
		"null1": {
			"description": "Inputs: Javascript Object and a String representing a key which may or may not be in the object. \n Outputs: True or False",
			"brokenpath": "null1.js",
			"tester": "null1tester.js"
		},
		"forloop1": {
			"description": "Find the error in this code segment.",
			"brokenpath": "forloop1.js",
			"tester": "forloop1tester.js"
		},
		"forloop2": {
			"description": "Find the error in this code segment.",
			"brokenpath": "forloop2.js",
			"tester": "forloop1tester.js"
		},
		"forloop3": {
			"description": "Find the error in this code segment.",
			"brokenpath": "forloop3.js",
			"tester": "forloop1tester.js"
		},
		"forloop4": {
			"description": "Find the error in this code segment.",
			"brokenpath": "forloop4.js",
			"tester": "forloop1tester.js"
		},
		"forloop5": {
			"description": "Find the error in this code segment.",
			"brokenpath": "forloop5.js",
			"tester": "forloop1tester.js"
		}
	},
	"2": {
		"pyth1": {
			"description": "Input: two integers.\n Output: Distance between values.",
			"brokenpath": "pyth1.js",
			"tester": "pyth1tester.js"
		},
		"pyth2": {
			"description": "Input: two integers.\n Output: Distance between values.",
			"brokenpath": "pyth2.js",
			"tester": "pyth1tester.js"
		},
		"lastinarray": {
			"description": "Input: An array of arrays [ [ ] [ ] ].\n Output: The very last value of all arrays.",
			"brokenpath": "lastinarrays.js",
			"tester": "liattester.js"
		},
		"counter": {
			"description": "Find the error in this code segment.",
			"brokenpath": "wrongincorder.js",
			"tester": "counttester.js"
		}
	},
	"3": {
		"2darr": {
			"description": "Creates a 2D array of zeros with rows number of rows and columns number of columns.",
			"brokenpath": "create2darr.js",
			"tester": "2darrtester.js"
		},
		"slope1": {
			"description": "Input: Two objects with x and y properties. \n Output the slope of the line between those points.",
			"brokenpath": "slope1.js",
			"tester": "slopetester.js"
		},
		"slope2": {
			"description": "Input: Two objects with x and y properties. \n Output the slope of the line between those points.",
			"brokenpath": "slope2.js",
			"tester": "slopetester.js"
		},
		"zeropad1":{
			"description": "Input: A number and a target length. \n Output the number as a string, with enough zeroes at the beginning to reach the target length.",
			"brokenpath": "zeropad1.js",
			"tester": "zeropadtester.js"
		},
		"zeropad2":{
			"description": "Input: A number and a target length. \n Output the number as a string, with enough zeroes at the beginning to reach the target length.",
			"brokenpath": "zeropad2.js",
			"tester": "zeropadtester.js"
		},
		"zeropad3":{
			"description": "Input: A number and a target length. \n Output the number as a string, with enough zeroes at the beginning to reach the target length.",
			"brokenpath": "zeropad3.js",
			"tester": "zeropadtester.js"
		}
	},
	"4": {
		"recurr1": {
			"description": "Recursively searches an array for an element and returns the index of that element.",
			"brokenpath": "recurr1.js",
			"tester": "recsearchtester.js"
		},
		"recurr2": {
			"description": "Recursively searches an array for an element and returns the index of that element.",
			"brokenpath": "recurr2.js",
			"tester": "recsearchtester.js"
		},
		"recurr3": {
			"description": "Recursively searches an array for an element and returns the index of that element.",
			"brokenpath": "recurr3.js",
			"tester": "recsearchtester.js"
		},
		"difficulty1":{
			"description": "Input: A numerical player score. \n Output the difficulty value, at most 1000 and at least 0.",
			"brokenpath": "difficulty1.js",
			"tester": "difficultytester.js"
		},
		"difficulty2":{
			"description": "Input: A numerical player score. \n Output the difficulty value, at most 1000 and at least 0.",
			"brokenpath": "difficulty2.js",
			"tester": "difficultytester.js"
		},
		"difficulty3":{
			"description": "Input: A numerical player score. \n Output the difficulty value, at most 1000 and at least 0.",
			"brokenpath": "difficulty3.js",
			"tester": "difficultytester.js"
		}
	},
	"5": {
		"selec1": {
			"description": "Sorts an array in decreasing order.",
			"brokenpath": "selectionsort.js",
			"tester": "sel_sort_tester.js"
		},
		"selec2": {
			"description": "Sorts an array in decreasing order.",
			"brokenpath": "selectionsort2.js",
			"tester": "sel_sort_tester.js"
		},
		"selec3": {
			"description": "Sorts an array in decreasing order.",
			"brokenpath": "selectionsort3.js",
			"tester": "sel_sort_tester.js"
		},
		"cardinalfacing1":{
			"description": "Input: A player's x and y velocity. \n Output the cardinal direction (north, east, south, west) as a char.\nNegative x is left, positive x is right, negative y is up, and positive y is down",
			"brokenpath": "cardinalfacing1.js",
			"tester": "cardinalfacingtester.js"
		},
		"cardinalfacing2":{
			"description": "Input: A player's x and y velocity. \n Output the cardinal direction (north, east, south, west) as a char.\nNegative x is left, positive x is right, negative y is up, and positive y is down",
			"brokenpath": "cardinalfacing2.js",
			"tester": "cardinalfacingtester.js"
		}
	}
}
